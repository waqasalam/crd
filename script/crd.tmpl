package {{ .Version }}

import (
	"fmt"
	apiextv1beta1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1"
	apiextcs "k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/wait"
	"reflect"
	"time"
)

const (
	CRDGroup   string = "snaproute.com"
	CRDVersion string = "{{.Version}}"
)
{{if len .ConfigCrdMap}}
var Crds = map[string]struct {
        CrdFullName string
        CrdPlural   string
	CrdKind     string
}{
     {{- range .ConfigCrdMap }}
         "{{ .NameLower }}": {"{{ .NamePlural }}" + "." + CRDGroup, "{{ .NamePlural }}", reflect.TypeOf({{.Name}}{}).Name()},

     {{- end}}
}
{{end}}

// Create the CRD resource, ignore error if it already exists
func CreateCRD(clientset apiextcs.Interface, crdname string) error {

	crd := &apiextv1beta1.CustomResourceDefinition{
		ObjectMeta: meta_v1.ObjectMeta{Name: Crds[crdname].CrdFullName},
		Spec: apiextv1beta1.CustomResourceDefinitionSpec{
			Group:   CRDGroup,
			Version: CRDVersion,
			Scope:   apiextv1beta1.NamespaceScoped,
			Names: apiextv1beta1.CustomResourceDefinitionNames{
				Plural: Crds[crdname].CrdPlural,
				Kind:   Crds[crdname].CrdKind,
			},
		},
	}

	_, err := clientset.ApiextensionsV1beta1().CustomResourceDefinitions().Create(crd)
	if err != nil && apierrors.IsAlreadyExists(err) {

		return nil
	}

	// Wait for the CRD to be created before we use it
	err = wait.Poll(500*time.Millisecond, 60*time.Second, func() (bool, error) {
		crd, err := clientset.ApiextensionsV1beta1().CustomResourceDefinitions().Get(Crds[crdname].CrdFullName, meta_v1.GetOptions{})
		if err != nil {
			fmt.Println("panic in wait")
			panic(err.Error())
		}

		fmt.Println("crd in wait", crd)
		for _, cond := range crd.Status.Conditions {
			switch cond.Type {
			case apiextv1beta1.Established:
				if cond.Status == apiextv1beta1.ConditionTrue {
					fmt.Printf("success already created no wait: %v\n", cond.Status)

					return true, err
				}
			case apiextv1beta1.NamesAccepted:
				if cond.Status == apiextv1beta1.ConditionFalse {
					fmt.Printf("Name conflict: %v\n", cond.Reason)
					fmt.Printf("error", err)
				}
			}
		}
		panic(err.Error())
	})
	return err
}
