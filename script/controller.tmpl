package main
{{ $version := .Version }}
{{ $component := .Component -}}

import (
	"flag"
	"fmt"
	apiextcs "k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset"
	"k8s.io/client-go/rest"
	"k8s.io/client-go/tools/cache"
	"k8s.io/client-go/tools/clientcmd"
	"{{ .PkgPath }}{{ .Component }}/{{- .Version }}"
	clientset "{{ .OutputPkg }}clientset/versioned"
	scheme "{{ .OutputPkg }}clientset/versioned/scheme"
	informers "{{ .OutputPkg }}informers/externalversions"
	"time"
)

// return rest config, if path not specified assume in cluster config
func GetClientConfig(kubeconfig string) (*rest.Config, error) {
	if kubeconfig != "" {
		return clientcmd.BuildConfigFromFlags("", kubeconfig)
	}
	return rest.InClusterConfig()
}

func main() {
	fmt.Println("Start the CRD")
	//	kubeconf := flag.String("kubeconf", "admin.conf", "Path to a kube config. Only required if out-of-cluster.")
	flag.Parse()
	kubeconf := ""
	config, err := GetClientConfig(kubeconf)
	if err != nil {
		panic(err.Error())
	}

	// create clientset
	clientset, err := clientset.NewForConfig(config)
	if err != nil {
		panic(err.Error())
	}

	clt, err := apiextcs.NewForConfig(config)
	if err != nil {
		panic(err.Error())
	}
	//Create all the crds

      {{- range .ConfigCrdMap }}
	err = {{ $version }}.CreateCRD(clt, "{{ .NameLower }}")
	if err != nil {
		panic(err)
	}
      {{- end }}

       scheme.AddToScheme(scheme.Scheme)

       {{$component}}InformerFactory := informers.NewSharedInformerFactory(clientset, time.Second*30)
       fmt.Println("create informers")
  
     {{- range .ConfigCrdMap }}
         {{ .NameLower }}informer := {{ $component }}InformerFactory.{{ $component | title}}().{{ $version | title}}().{{ .Name -}}s()
     {{- end }}


       // Watch for changes in BGP objects and fire Add, Delete, Update callbacks
     {{- range .ConfigCrdMap }}
	{{ .NameLower }}informer.Informer().AddEventHandler(cache.ResourceEventHandlerFuncs{
		AddFunc: func(obj interface{}) {
		},
		DeleteFunc: func(obj interface{}) {
		},
		UpdateFunc: func(oldObj, newObj interface{}) {
                     _ = {{ $version }}.CompareObjAndDiff(oldObj, newObj)
		},
	},
	)
     {{- end}}

	stop := make(chan struct{})
	go {{ $component }}InformerFactory.Start(stop)

	// Wait forever
	select {}
}
